/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NAVR 1
#define NSL  2
#define NSSL 3
#define FUNL 4
#define MOUS 5
#define MEDR 6

#define A_SFW LG(LA(LS(H))) // Amethyst: Swap Focused Window to Clockwise Screen
#define BCK LC(LBKT) // Navigate Back
#define SL LG(LEFT) // Move a Space Left
#define SR LG(RIGHT) // Move a Space Right
#define MC LG(UP) // Mission Control
#define SCRS TD(TD_SCREEN) // Screenshot to Clipboard (One Tap) or to Desktop (Two Taps)
#define ST LC(LS(LA(EQL))) // Shade: Toggle On/Off
#define SD LC(LS(LA(LBRC))) // Shade: Brightness Up
#define SU LC(LS(LA(RBRC))) // Shade: Brightness Down
#define THR_R LC(LG(RIGHT)) //Throw the Active Window to the Space to the Right
#define THR_L LC(LG(UP)) //Throw the Active Window to the Space to the Right
#define TAB_L LC(LS(LEFT)) // Switch to the Tab to the Left
#define TAB_R LC(LS(RIGHT)) // Switch to the Tab to the Right
#define TAB_U LC(LS(UP)) // Switch to the Tab Above
#define TAB_D LC(LS(DOWN)) // Switch to the Tab Below

&mt {
    tapping-term-ms = <160>;
};

/ {

        behaviors {
                A_RR: tap_dance_0 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "A_RR";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LC(LS(LA(Z)))>, <&kp LC(LS(LA(X)))>; // Amethyst: Reset Amethyst (One Tap) or Reset Auto Rais (Two Taps)
                };
        };

        keymap {
                compatible = "zmk,keymap";

                base_layer {
                        bindings = <
   &mt LALT Q  &kp W &kp E &kp R &kp T          &kp Y &kp U  &kp I     &kp O   &mt LALT P
   &mt LSHFT A &kp S &kp D &kp F &kp G          &kp H &kp J  &kp K     &kp L   &mt LSHFT SQT
   &mt LCTRL Z &kp X &kp C &kp V &kp B          &kp N &kp M  &kp COMMA &kp DOT &mt LCTRL FSLH
   &lt MEDR TAB &lt NAVR SPACE &kp ESC          &lt NSSL ENTER &lt NSL BSPC &trans
                        >;
                };

                navr_layer {
                        bindings = <
   &kp LGUI  &trans    &trans    &trans   &trans      &caps_word &kp TAB_L &kp TAB_D &kp TAB_U &kp TAB_R
   &kp LGUI  &kp LSHFT &kp LCTRL &kp LALT &trans      &kp CLCK   &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT
   &kp LCTRL &trans    &trans    &trans   &trans      &kp INS    &kp HOME  &kp PG_DN &kp PG_UP &kp END
                       &trans    &trans   &kp ENTER   &kp ENTER  &kp DEL   &trans
                        >;
                };

                nsl_layer {
                        bindings = <
   &mt LALT LPRN   &kp N7 &kp N8    &kp N9 &kp RPRN       &kp LBKT  &kp AMPS &kp ASTRK &kp BSLH  &mt LALT RBKT
   &mt LSHFT COLON &kp N4 &kp N5    &kp N6 &kp EQUAL      &kp LBRC  &kp DLLR &kp PRCNT &kp CARET &mt LSHFT RBRC 
   &mt LCTRL GRAVE &kp N1 &kp N2    &kp N3 &kp PLUS       &kp TILDE &kp EXCL &kp COMMA &kp DOT   &mt LCTRL SLASH
                          &kp UNDER &kp N0 &kp MINUS      &kp MINUS &trans   &trans
                        >;
                };

                nssl_layer {
                        bindings = <
   &mt LALT LBRC   &kp AMPS &kp ASTRK &kp LPAR  &kp RBRC     &kp LBKT  &kp AMPS &kp ASTRK &kp BSLH  &mt LALT RBKT
   &mt LSHFT SEMI  &kp DLLR &kp PRCNT &kp CARET &kp PLUS     &kp LBRC  &kp DLLR &kp PRCNT &kp CARET &mt LSHFT RBRC 
   &mt LCTRL TILDE &kp EXCL &kp AT    &kp HASH  &kp PIPE     &kp TILDE &kp EXCL &kp COMMA &kp DOT   &mt LCTRL SLASH
                            &mo FUNL  &kp SPACE &kp MINUS    &kp MINUS &kp LGUI &trans
                        >;
                };
                
                funl_layer {
                        bindings = <
   &kp F12 &kp F7 &kp F8 &kp F9 &trans     &trans &trans &trans &trans &kp LALT
   &kp F11 &kp F4 &kp F5 &kp F6 &trans     &trans &trans &trans &trans &kp LALT
   &kp F10 &kp F1 &kp F2 &kp F3 &trans     &trans &trans &trans &trans &kp LALT
                  &trans &trans &trans     &trans &trans &trans
                        >;
                };

                mous_layer {
                        bindings = <
   &trans    &trans   &trans &trans    &A_RR     &kp BCK &kp SL &kp MC &kp MC &kp SR
   &kp THR_L &trans   &trans &kp THR_R &trans       &trans  &trans &trans &trans &trans
   &A_RR     &A_RR    &trans &trans    &trans       &trans  &trans &trans &trans &trans
                      &trans &trans    &trans       &trans  &trans &trans
                        >;
                };

                medr_layer {
                        bindings = <
   &reset &trans &trans &trans &trans      &trans &trans     &trans       &trans       &trans
   &trans &trans &trans &trans &trans      &trans &kp K_PREV &kp K_VOL_UP &kp K_VOL_DN &kp K_NEXT
   &trans &trans &trans &trans &trans      &kp ST &trans     &kp SD       &kp SU       &trans
         &trans &kp K_MUTE &kp K_STOP      &kp K_STOP &kp K_PP &trans
                        >;
                };
        };
};
